function [G, B] = basisNMFoption(X, G, basicParameter, iteration, Gfixed, attackMatrix, initialB, dataSource)

basicParameter.alpha = 0;

if nargin < 6
    attackMatrix = false;
end

if nargin < 7
    initialB = false;
end

beta = basicParameter.beta;

if strcmp(dataSource, 'scale')
    B = rand(size(X,1), size(G,1));
    if basicParameter.harmConstrain && basicParameter.softConstraint == false
        B = initializeWwithHarmonicConstraint(basicParameter);
    end
elseif strcmp(dataSource, 'data')

    if basicParameter.useInitialB && exist('initialB')
        B = initialB;
    else
        B = rand(size(X,1), size(G,1));
        if basicParameter.harmConstrain && basicParameter.softConstraint == false
           B = initializeWwithHarmonicConstraint(basicParameter); 
        end
    end
end

% if basicParameter.BpartialUpdate
%     harmBoolean = initializeWwithHarmonicConstraint(basicParameter); 
%     harmBoolean(harmBoolean>0) = 1;
% end
 
[G, B] = NMFwithMatrix(G, B, X, basicParameter, iteration);



end